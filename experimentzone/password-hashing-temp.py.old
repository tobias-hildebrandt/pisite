# format:
# $x$y$z
# x = algorithm
# y = log_2(rounds) (default 12 for bcrypt, 4<=y<=31)
# z = 22 chars of salt + 21 chars of hash

def test():
    hash=[]
    # salt= 22 * 'a'
    # rounds=13
    salt=None
    rounds=None
    
    
    from passlib.context import CryptContext
    pwd_context = CryptContext(
        schemes=["bcrypt"], # truncates past 72 bytes
        # bcrypt__rounds=13, # 2^n, default 12
    )
    hash.append(pwd_context.hash("testpass", salt=salt, rounds=rounds))
    
    
    from passlib.hash import bcrypt
    hash.append(bcrypt.hash("testpass", salt=salt, rounds=rounds))
    
    
    print("prefined salt is: " + str(salt))
    print("prefined rounds is: " + str(rounds))
    print()
    
    last=None
    for h in hash:
        print(h)
        split = h.split('$')
        print("alg = " + split[1])
        print("rounds = " + split[2])
        print("salt = " + split[3][0:21]) # first 22 chars
        print("hash = " + split[3][21:]) # everything after salt
        
        
        if last is not None:
            print("same as last? " + str(h == last))
        else:
            print("last is None")
        print()
        last=h

# test()
# exit()
    
# globals???
global_rounds = None # change???
global_filename = "experimentzone/testfile.txt.old"
global_debug = True

from passlib.hash import bcrypt
    
def add_user_to_file(username, plaintext_password, filename, groups=["users"]):
    ''' 
    adds user to the userfile
    does not cleanup userfile, but won't dirty it if it is clean
    '''
    
    if not does_user_exist(username, filename):
        line="{0}${1}{2}".format(
            username, 
            ",".join(groups),
            bcrypt.hash(plaintext_password, rounds=global_rounds)
        )
        
        with open(filename, 'a') as file:
            file.write(line)
            file.write("\n")
            return True
    else:
        print("user {0} already exists".format(username))
        return False
        
        
def does_user_exist(username, filename):
    '''
    returns if the user already exists in the file
    '''
    with open(filename, 'r') as file:
        lines = file.readlines()
        
    if len(lines) == 0: 
        return False
    
    for line in lines:
        if get_sanitized_line(line) != "": # ignore empty lines
            details = get_user_details_from_line(line)
            if details['username'] == username:
                return True
    
    return False


def cleanup_userfile(filename):
    '''
    sorts and removes badly-placed newlines
    this completely rewrites the file each time
    not suitable for large files
    '''
    with open(filename, 'r+') as file:
        lines = file.readlines() # read all the lines
        lines.sort() # sort lines
        file.seek(0) # go back to start
        for line in lines:
            sline = get_sanitized_line(line) # sanitze line
            if sline != "": # if line is not empty
                file.write(sline) # write the line
                file.write("\n") # make sure to end with newline
        file.truncate() # remove anything left after we have written all lines

def check_userfile_validity(filename):
    '''
    returns whether or not the userfile is valid
    if errors are found, prints them 
    
    line validity: see notes.txt
    '''
    with open(filename, 'r') as file:
        lines = file.readlines() # read all the lines
    
    
    for line in lines:
        valid = True
        
        print("line:\t{0}".format(get_sanitized_line(line)))
        
        # make sure line isn't empty
        if line[0] == "\n":
            print("line only contains newline character")
            valid = False
        
        # make sure line has minimum delimiters 
        try:
            details = get_user_details_from_line(line)
            
            if not details['username'].isalnum():
                print("username {0} is not alphanumeric".format(details['username']))
                valid = False
                
                
            groups = details['groups'].split(",")
            if groups[0] == "":
                print("groups is empty")
                valid = False
            else:
                for group in groups:
                    if not group.isalnum():
                        print ("group {0} is not alphanumeric".format(group))
                        valid = False
            
            if not details['alg'] == "2b": # alg is not bcrypt
                print ("alg: \"{0}\" is not 2b (bcrypt)".format(details['alg']))
                valid = False
                
        except IndexError:
            print("line is not correctly delimited")
            valid =  False
            
        # make sure fields lengths are correct
        
        # tell us what the result is
        print("valid:\t{0}".format(valid))
        

def get_user_details_from_line(line):
    '''
    returns a dictionary of information about a user
    '''
    line = get_sanitized_line(line)
    fields = line.split("$")
    details={
        'username' : fields[0],
        'groups' : fields[1],
        'alg' : fields[2],
        'rounds' : fields[3],
        'salt' : fields[4][:21],
        'rawhash' : fields[4][21:],
        'wholehash': "".join(fields[2:]),
        }
    
    return details

def get_sanitized_line(line):
    '''
    strips newline characters
    '''
    return line.strip("\n")

def add_random_users():
    import random
    from binascii import unhexlify
    
    for x in range(10):
        username=""
        # for y in range(3):
        #     username += chr(random.randint(0x41, 0x5a))
        # for y in range(3):
        #     username += str(random.randint(0, 9))
        username = "user" + str(x)
        #print(username)
        passwd = 'bad password 123'
        add_user_to_file(username, passwd, global_filename)
    
#add_random_users()

check_userfile_validity(global_filename)